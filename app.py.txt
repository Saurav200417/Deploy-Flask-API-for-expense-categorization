from flask import Flask, request, jsonify
from tensorflow.keras.models import load_model
import numpy as np
import pickle

app = Flask(__name__)

# Load the saved model, vectorizer, and label encoder
model = load_model('expense_classifier.h5')
with open('vectorizer.pkl', 'rb') as f:
    vectorizer = pickle.load(f)
with open('label_encoder.pkl', 'rb') as f:
    label_encoder = pickle.load(f)

@app.route('/predict', methods=['POST'])
def predict():
    data = request.get_json(force=True)  # Expects JSON with a "description" key
    description = data.get('description', '')
    if not description:
        return jsonify({'error': 'No description provided'}), 400
    # Vectorize the input description
    features = vectorizer.transform([description]).toarray()
    prediction = model.predict(features)
    predicted_index = int(np.argmax(prediction, axis=1)[0])
    predicted_category = label_encoder.inverse_transform([predicted_index])[0]
    return jsonify({'predicted_category': predicted_category})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=10000, debug=True)  # Use port 10000 for Render
